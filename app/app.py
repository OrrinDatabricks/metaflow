"""
Metadata Enrichment Tracker - Main Streamlit Application
"""
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
from typing import Optional
import logging
import sys
import os

# Add parent directory to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import Config
from database.database import get_db_manager
from app.utils import format_timestamp, get_status_color, get_user_name

# Configure page
st.set_page_config(
    page_title=Config.APP_TITLE,
    page_icon=Config.APP_ICON,
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def main():
    """Main application function"""
    st.title(f"{Config.APP_ICON} {Config.APP_TITLE}")
    
    # Initialize database
    db = get_db_manager()
    
    # Create tables if needed
    if 'tables_created' not in st.session_state:
        if db.create_tables():
            st.session_state.tables_created = True
        else:
            st.error("Failed to initialize database. Please check your configuration.")
            return
    
    # Sidebar navigation
    with st.sidebar:
        st.header("Navigation")
        page = st.radio(
            "Select Page",
            ["Dashboard", "Review & Approve", "Bulk Upload", "History", "Settings"],
            key="navigation"
        )
        
        st.divider()
        
        # User info
        user_name = get_user_name()
        st.info(f"üë§ **User:** {user_name}")
        
        # Quick stats
        stats = db.get_summary_stats()
        st.metric("Total Items", stats.get('total', 0))
        st.metric("Pending Review", stats.get('pending', 0))
        st.metric("Approved", stats.get('approved', 0))
    
    # Route to appropriate page
    if page == "Dashboard":
        show_dashboard(db)
    elif page == "Review & Approve":
        show_review_page(db)
    elif page == "Bulk Upload":
        show_bulk_upload(db)
    elif page == "History":
        show_history_page(db)
    elif page == "Settings":
        show_settings_page(db)

def show_dashboard(db):
    """Display dashboard with overview and metrics"""
    st.header("üìä Dashboard")
    
    # Get summary statistics
    stats = db.get_summary_stats()
    
    # Key metrics
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="Total Items",
            value=stats.get('total', 0),
            delta=None
        )
    
    with col2:
        st.metric(
            label="Pending Review",
            value=stats.get('pending', 0),
            delta=None
        )
    
    with col3:
        st.metric(
            label="Approved",
            value=stats.get('approved', 0),
            delta=None
        )
    
    with col4:
        st.metric(
            label="Rejected",
            value=stats.get('rejected', 0),
            delta=None
        )
    
    # Charts
    col1, col2 = st.columns(2)
    
    with col1:
        # Status distribution pie chart
        if stats.get('total', 0) > 0:
            status_data = {k: v for k, v in stats.items() if k != 'total' and v > 0}
            
            fig = px.pie(
                values=list(status_data.values()),
                names=list(status_data.keys()),
                title="Metadata Items by Status",
                color_discrete_map={
                    'pending': '#FFA500',
                    'approved': '#28a745',
                    'rejected': '#dc3545',
                    'edited': '#17a2b8'
                }
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("No data available for status distribution")
    
    with col2:
        # Recent activity
        st.subheader("Recent Activity")
        recent_items = db.get_metadata_items()
        
        if not recent_items.empty:
            recent_items = recent_items.head(10)
            for _, item in recent_items.iterrows():
                status_color = get_status_color(item['status'])
                full_name = f"{item['catalog_name']}.{item['schema_name']}.{item['table_name']}"
                if item['column_name']:
                    full_name += f".{item['column_name']}"
                
                st.markdown(
                    f"**{full_name}** "
                    f"<span style='color: {status_color}'>‚óè</span> {item['status']}",
                    unsafe_allow_html=True
                )
                st.caption(f"{item['metadata_type']} ‚Ä¢ {format_timestamp(item['created_at'])}")
                if item['generation_method']:
                    st.caption(f"Generated by: {item['generation_method']}")
        else:
            st.info("No recent activity")

def show_review_page(db):
    """Display review and approval page"""
    st.header("‚úÖ Review & Approve")
    
    # Filters
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        status_filter = st.selectbox(
            "Filter by Status",
            ["All", "pending", "approved", "rejected", "edited"],
            key="review_status_filter"
        )
    
    with col2:
        # Get unique catalogs
        all_items = db.get_metadata_items()
        if not all_items.empty:
            catalogs = ["All"] + sorted(all_items['catalog_name'].unique().tolist())
            catalog_filter = st.selectbox(
                "Filter by Catalog",
                catalogs,
                key="review_catalog_filter"
            )
        else:
            catalog_filter = "All"
    
    with col3:
        # Get unique table names
        if not all_items.empty:
            table_names = ["All"] + sorted(all_items['table_name'].unique().tolist())
            table_filter = st.selectbox(
                "Filter by Table",
                table_names,
                key="review_table_filter"
            )
        else:
            table_filter = "All"
    
    with col4:
        st.write("")  # Spacer
        if st.button("üîÑ Refresh", key="refresh_review"):
            st.rerun()
    
    # Get filtered data
    status = None if status_filter == "All" else status_filter
    table_name = None if table_filter == "All" else table_filter
    catalog_name = None if catalog_filter == "All" else catalog_filter
    items = db.get_metadata_items(status=status, table_name=table_name, catalog_name=catalog_name)
    
    if items.empty:
        st.info("No items found matching the selected filters.")
        return
    
    # Display items for review
    st.subheader(f"Found {len(items)} items")
    
    for idx, item in items.iterrows():
        # Build full name
        full_name = f"{item['catalog_name']}.{item['schema_name']}.{item['table_name']}"
        if item['column_name']:
            full_name += f".{item['column_name']}"
            
        with st.expander(
            f"**{full_name}** ({item['metadata_type']}) - {item['status']}",
            expanded=item['status'] == 'pending'
        ):
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.markdown("**Original Value:**")
                st.text(item['original_value'] or "None")
                
                st.markdown("**Generated Value:**")
                st.text_area(
                    "Generated",
                    value=item['generated_value'],
                    height=100,
                    disabled=True,
                    key=f"generated_{item['id']}"
                )
                
                st.markdown("**Current Value:**")
                new_value = st.text_area(
                    "Edit if needed",
                    value=item['current_value'],
                    height=100,
                    key=f"current_{item['id']}"
                )
                
                comment = st.text_input(
                    "Comment (optional)",
                    key=f"comment_{item['id']}"
                )
                
                # Show generation details if available
                if item['generation_method']:
                    with st.expander("ü§ñ Generation Details", expanded=False):
                        st.caption(f"**Method:** {item['generation_method']}")
                        if item['generation_metadata']:
                            try:
                                import json
                                metadata = json.loads(item['generation_metadata'])
                                st.json(metadata)
                            except:
                                st.text(item['generation_metadata'])
                        
                        if item['data_sample']:
                            st.caption("**Sample Data Used:**")
                            try:
                                sample_data = json.loads(item['data_sample'])
                                st.json(sample_data)
                            except:
                                st.text(item['data_sample'])
            
            with col2:
                st.markdown("**Item Details:**")
                st.caption(f"**ID:** {item['id']}")
                st.caption(f"**Catalog:** {item['catalog_name']}")
                st.caption(f"**Schema:** {item['schema_name']}")
                st.caption(f"**Table:** {item['table_name']}")
                if item['column_name']:
                    st.caption(f"**Column:** {item['column_name']}")
                st.caption(f"**Created:** {format_timestamp(item['created_at'])}")
                st.caption(f"**Created by:** {item['created_by'] or 'Unknown'}")
                if item['reviewed_by']:
                    st.caption(f"**Reviewed by:** {item['reviewed_by']}")
                    st.caption(f"**Reviewed:** {format_timestamp(item['reviewed_at'])}")
                
                st.markdown("**Actions:**")
                
                col_a, col_b = st.columns(2)
                with col_a:
                    if st.button("‚úÖ Approve", key=f"approve_{item['id']}", type="primary"):
                        if db.update_metadata_item(
                            item['id'], new_value, 'approved', 
                            get_user_name(), comment
                        ):
                            st.success("Approved!")
                            st.rerun()
                
                with col_b:
                    if st.button("‚ùå Reject", key=f"reject_{item['id']}"):
                        if db.update_metadata_item(
                            item['id'], new_value, 'rejected', 
                            get_user_name(), comment
                        ):
                            st.success("Rejected!")
                            st.rerun()
                
                if new_value != item['current_value']:
                    if st.button("üìù Save Edit", key=f"edit_{item['id']}", type="secondary"):
                        if db.update_metadata_item(
                            item['id'], new_value, 'edited', 
                            get_user_name(), comment
                        ):
                            st.success("Updated!")
                            st.rerun()

def show_bulk_upload(db):
    """Display bulk upload page"""
    st.header("üì§ Bulk Upload")
    
    st.markdown("""
    Upload metadata items in bulk using a CSV file. The CSV should have the following columns:
    - `catalog_name`: Name of the catalog
    - `schema_name`: Name of the schema
    - `table_name`: Name of the table
    - `column_name`: Name of the column (optional, leave empty for table-level metadata)
    - `metadata_type`: Type of metadata ('comment' or 'description')
    - `original_value`: Original value (optional)
    - `generated_value`: Generated metadata value
    - `generation_method`: Method used for generation (optional)
    """)
    
    # File upload
    uploaded_file = st.file_uploader(
        "Choose a CSV file",
        type=['csv'],
        help="Upload a CSV file with metadata items"
    )
    
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)
            
            # Validate columns
            required_columns = ['catalog_name', 'schema_name', 'table_name', 'metadata_type', 'generated_value']
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                st.error(f"Missing required columns: {missing_columns}")
                return
            
            # Show preview
            st.subheader("Preview")
            st.dataframe(df.head(10))
            
            st.subheader("Upload Summary")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Total Rows", len(df))
            with col2:
                st.metric("Unique Tables", df['table_name'].nunique())
            with col3:
                st.metric("Metadata Types", df['metadata_type'].nunique())
            
            # Upload button
            if st.button("üöÄ Upload Data", type="primary"):
                user_name = get_user_name()
                success_count = 0
                
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                for idx, row in df.iterrows():
                    status_text.text(f"Processing row {idx + 1} of {len(df)}")
                    
                    if db.insert_metadata_item(
                        catalog_name=row['catalog_name'],
                        schema_name=row['schema_name'],
                        table_name=row['table_name'],
                        column_name=row.get('column_name'),
                        metadata_type=row['metadata_type'],
                        original_value=row.get('original_value'),
                        generated_value=row['generated_value'],
                        created_by=user_name,
                        generation_method=row.get('generation_method')
                    ):
                        success_count += 1
                    
                    progress_bar.progress((idx + 1) / len(df))
                
                status_text.text("Upload complete!")
                st.success(f"Successfully uploaded {success_count} out of {len(df)} items")
                
                if success_count < len(df):
                    st.warning(f"{len(df) - success_count} items failed to upload. Check the logs for details.")
        
        except Exception as e:
            st.error(f"Error processing file: {e}")

def show_history_page(db):
    """Display history page"""
    st.header("üìú History")
    
    # Get all items
    items = db.get_metadata_items()
    
    if items.empty:
        st.info("No history available.")
        return
    
    # Timeline view
    st.subheader("Activity Timeline")
    
    # Sort by timestamp
    items_sorted = items.sort_values('updated_at', ascending=False)
    
    for _, item in items_sorted.head(20).iterrows():
        with st.container():
            col1, col2, col3 = st.columns([1, 3, 1])
            
            with col1:
                status_color = get_status_color(item['status'])
                st.markdown(
                    f"<span style='color: {status_color}; font-size: 20px;'>‚óè</span>",
                    unsafe_allow_html=True
                )
            
            with col2:
                full_name = f"{item['catalog_name']}.{item['schema_name']}.{item['table_name']}"
                if item['column_name']:
                    full_name += f".{item['column_name']}"
                st.markdown(f"**{full_name}**")
                st.caption(f"{item['metadata_type']} ‚Ä¢ {item['status']} ‚Ä¢ {format_timestamp(item['updated_at'])}")
                
                if item['reviewed_by']:
                    st.caption(f"Reviewed by {item['reviewed_by']}")
                if item['generation_method']:
                    st.caption(f"Generated by {item['generation_method']}")
            
            with col3:
                if st.button("View Details", key=f"history_{item['id']}"):
                    show_item_history(db, item['id'])
            
            st.divider()

def show_item_history(db, item_id: int):
    """Show detailed history for a specific item"""
    history = db.get_approval_history(item_id)
    
    if not history.empty:
        st.subheader(f"History for Item #{item_id}")
        
        for _, record in history.iterrows():
            with st.expander(
                f"{record['action'].title()} by {record['user_name']} - {format_timestamp(record['timestamp'])}"
            ):
                if record['old_value'] != record['new_value']:
                    col1, col2 = st.columns(2)
                    with col1:
                        st.markdown("**Old Value:**")
                        st.text(record['old_value'] or "None")
                    with col2:
                        st.markdown("**New Value:**")
                        st.text(record['new_value'] or "None")
                
                if record['comment']:
                    st.markdown("**Comment:**")
                    st.text(record['comment'])

def show_settings_page(db):
    """Display settings page"""
    st.header("‚öôÔ∏è Settings")
    
    # Database status
    st.subheader("Database Status")
    try:
        stats = db.get_summary_stats()
        st.success("‚úÖ Database connection is healthy")
        st.json(stats)
    except Exception as e:
        st.error(f"‚ùå Database connection issue: {e}")
    
    # Configuration
    st.subheader("Configuration")
    st.code(f"""
    Database Schema: {Config.DB_SCHEMA}
    App Title: {Config.APP_TITLE}
    """)
    
    # Maintenance actions
    st.subheader("Maintenance")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîÑ Refresh Schema", help="Recreate database tables"):
            if db.create_tables():
                st.success("Schema refreshed successfully")
            else:
                st.error("Failed to refresh schema")
    
    with col2:
        if st.button("üìä Export Data", help="Export all data to CSV"):
            items = db.get_metadata_items()
            if not items.empty:
                csv = items.to_csv(index=False)
                st.download_button(
                    label="Download CSV",
                    data=csv,
                    file_name=f"metadata_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
            else:
                st.info("No data to export")

if __name__ == "__main__":
    main()
